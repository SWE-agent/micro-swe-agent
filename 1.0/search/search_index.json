{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index","text":"The 100 line AI agent that's actually useful <ul> <li>\ud83d\udc1c Minimal: Just 100 lines of python (+100 for env, model, script) \u2014 no fancy dependencies! Optionally, a few more lines for interactive UIs.</li> <li>\ud83d\udcaa Powerful: Resolves issues on the SWE-bench verified benchmark.</li> <li>\ud83e\udd17 Friendly: Comes with two convenient UIs that will turn this into your daily dev swiss army knife!</li> <li>\ud83c\udf93 Cutting edge: Built by the Princeton &amp; Stanford team behind SWE-bench and SWE-agent.</li> </ul> <p>Use it to:</p> <ul> <li>\ud83d\udd25 Instantly solve problems: <code>pip install pipx &amp;&amp; pipx run micro-swe-agent</code></li> <li>\u2699\ufe0f Take full control &amp; quickly build custom agents</li> <li>\ud83c\udfcb Fine-tune &amp; RL with a minimal, assumption-free agent</li> <li>\ud83d\udc33 Deploy seamlessly to sandboxed environments &amp; CI/CD</li> </ul> Why use micro-SWE-agent for research? <p>SWE-agent jump-started the development of AI agents in 2024. Back then, we placed a lot of emphasis on tools and special interfaces for the agent. However, one year later, a lot of this is not needed at all to build a useful agent!</p> <p>In fact, micro-SWE-agent:</p> <ul> <li>Does not have any tools other than bash \u2014 it doesn't even use the tool-calling interface of the LMs. This means that you can run it with literally any model. When running in sandboxed environments you also don't need to take care of installing a single package \u2014 all it needs is bash.</li> <li>Has a completely linear history \u2014 every step of the agent just appends to the messages and that's it. So there's no difference between the trajectory and the messages that you pass on to the LM.</li> <li>Executes actions with <code>subprocess.run</code> \u2014 every action is completely independent (as opposed to keeping a stateful shell session running). This makes it trivial to execute the actions in sandboxes (literally just switch out <code>subprocess.run</code> with <code>docker exec</code>) and to scale up effortlessly.</li> </ul> <p>This makes it perfect as a baseline system and for a system that puts the language model (rather than the agent scaffold) in the middle of our attention.</p> Why use micro-SWE-agent as a tool? <p>Some agents are overfitted research artifacts. Others are UI-heavy tools, highly optimized for a specific user experience. Both variants are hard to understand.</p> <p><code>micro</code> wants to be:</p> <ul> <li>Simple enough to understand at a glance</li> <li>Convenient enough to use in daily workflows</li> <li>Flexible to extend</li> </ul> <p>A hackable tool, not a black box.</p> <p>Unlike other agents (including our own swe-agent), it is radically simpler, because it:</p> <ul> <li>Does not have any tools other than bash \u2014 it doesn't even use the tool-calling interface of the LMs.</li> <li>Has a completely linear history \u2014 every step of the agent just appends to the messages and that's it.</li> <li>Executes actions with <code>subprocess.run</code> \u2014 every action is completely independent (as opposed to keeping a stateful shell session running).</li> </ul> <p>micro-SWE-agent comes with two convenient interfaces:</p> <p> <p>Simple UI</p> </p> <p> <p>Textual UI</p> </p>"},{"location":"#get-started","title":"Get Started","text":"<p>Ready to try micro-SWE-agent?</p> <p>\ud83d\ude80 Installation &amp; Quick Start \u2192</p> <p>Install with pipx in seconds or set up for development - choose your path and get started immediately!</p>"},{"location":"#whats-next","title":"What's Next?","text":"<p>Ready to dive deeper? Check out:</p> <ul> <li>\ud83d\ude80 Installation &amp; Quick Start - Get up and running in minutes</li> <li>API Reference - Explore all available components</li> <li>Run Scripts - Learn how to create custom entry points</li> <li>Models - Configure different language models</li> <li>Environments - Set up different execution environments</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>We happily accept contributions! Areas where we'd love help:</p> <ul> <li>Support for more models (anything where <code>litellm</code> doesn't work out of the box)</li> <li>Documentation, examples, tutorials, etc.</li> <li>Support for more environments &amp; deployments (e.g., run it as a github action, etc.)</li> <li>Take a look at the issues and see if there's anything you'd like to work on!</li> </ul>"},{"location":"configuration/","title":"Configuration","text":"<p>All global configuration can be either set as environment variables, or in the <code>.env</code> file (the exact location is printed when you run <code>micro</code>).</p> <p>Precedence</p> <p>Environment variables take precedence over variables set in the <code>.env</code> file.</p> <pre><code># Default run script entry point for the main CLI\n# (default: \"microsweagent.run.local\")\nMSWEA_DEFAULT_RUN=\"microsweagent.run.local\"\n\n# Config path for GitHub issue script\n# (default: package_dir / \"config\" / \"github_issue.yaml\")\nMSWEA_GITHUB_CONFIG_PATH=\"/path/to/your/github/config.yaml\"\n\n# Global limit on number of model calls (0 = no limit)\n# (default: 0)\nMSWEA_GLOBAL_CALL_LIMIT=\"100\"\n\n# Global cost limit in dollars (0 = no limit)\n# (default: 0)\nMSWEA_GLOBAL_COST_LIMIT=\"10.00\"\n\n# Custom style path for trajectory inspector\n# (default: package_dir / \"config\" / \"local2.tcss\")\nMSWEA_INSPECTOR_STYLE_PATH=\"/path/to/your/inspector/style.tcss\"\n\n# Config path for local2 textual interface script\n# (default: package_dir / \"config\" / \"local.yaml\")\nMSWEA_LOCAL2_CONFIG_PATH=\"/path/to/your/local2/config.yaml\"\n\n# Custom style path for local2 textual interface\n# (default: package_dir / \"config\" / \"local2.tcss\")\nMSWEA_LOCAL2_STYLE_PATH=\"/path/to/your/local2/style.tcss\"\n\n# Config path for local run script\n# (default: package_dir / \"config\" / \"local.yaml\")\nMSWEA_LOCAL_CONFIG_PATH=\"/path/to/your/own/config\"\n\n# Default model name\n# (default: not set)\nMSWEA_MODEL_NAME=\"claude-sonnet-4-20250514\"\n</code></pre> <p>In addition, if you are prompted for a model name &amp; API key, it will be stored in the <code>.env</code> file as <code>API_KEY_&lt;MODEL_NAME&gt;</code>.</p>"},{"location":"installation/","title":"Quick start","text":"<p>Installation Options</p> pipxpipFrom source <p>Use pipx to install &amp; run <code>micro</code> in an isolated environment.</p> <p>First install pipx, then</p> <pre><code># Simple UI\npipx run --spec git+ssh://git@github.com/SWE-agent/micro-swe-agent micro\n# Textual UI\npipx run --spec git+ssh://git@github.com/SWE-agent/micro-swe-agent micro2\n</code></pre> <p>If the invocation doesn't immediately work, you might need to run <code>pipx ensurepath</code>.</p> <p>Use pip to install <code>micro</code> in your current environment:</p> <pre><code>pip install micro-swe-agent\n</code></pre> <p>Then run:</p> <pre><code># Simple UI\nmicro\n# Textual UI\nmicro2\n</code></pre> <p>For development or if you want to customize the agent:</p> <pre><code>git clone https://github.com/SWE-agent/micro-swe-agent.git\ncd micro-swe-agent\npip install -e .\n</code></pre> <p>Then run:</p> <pre><code># Simple UI\nmicro\n# Textual UI\nmicro2\n</code></pre> <p>Or pick a run script:</p> <pre><code>python microsweagent/run/hello_world.py\n</code></pre> Example Prompts <p>Try micro-SWE-agent with these example prompts:</p> <ul> <li>Implement a Sudoku solver in python in the <code>sudoku</code> folder. Make sure the codebase is modular and well tested with pytest.</li> <li>Please run pytest on the current project, discover failing unittests and help me fix them. Always make sure to test the final solution.</li> <li>Help me document &amp; type my codebase by adding short docstrings and type hints.</li> </ul>"},{"location":"reference/","title":"API Reference","text":"<p>This section provides detailed documentation for all classes and modules in micro-SWE-agent.</p>"},{"location":"reference/#agents","title":"Agents","text":"<ul> <li>DefaultAgent - The minimal default agent implementation</li> <li>InteractiveAgent - Agent with human-in-the-loop functionality</li> <li>TextualAgent - Agent with interactive TUI using Textual</li> </ul>"},{"location":"reference/#models","title":"Models","text":"<ul> <li>LitellmModel - Wrapper for LiteLLM models (supports most LLM providers)</li> <li>AnthropicModel - Specialized interface for Anthropic models</li> <li>DeterministicModel - Deterministic models for testing</li> <li>Model Utilities - Convenience functions for model selection and configuration</li> </ul>"},{"location":"reference/#environments","title":"Environments","text":"<ul> <li>LocalEnvironment - Execute commands in the local environment</li> <li>DockerEnvironment - Execute commands in Docker containers</li> <li>SwerexDockerEnvironment - Extended Docker environment with SWE-Rex integration</li> </ul>"},{"location":"reference/#run-scripts","title":"Run Scripts","text":"<p>Entry points and command-line interfaces:</p> <ul> <li>Hello World - Simple example usage</li> <li>Local - Interactive local execution</li> <li>Local2 (Textual) - TUI-based local execution</li> <li>GitHub Issue - GitHub issue solver</li> <li>SWE-bench - SWE-bench evaluation script</li> </ul>"},{"location":"reference/agents/default/","title":"DefaultAgent","text":""},{"location":"reference/agents/default/#microsweagent.agents.default.AgentConfig","title":"microsweagent.agents.default.AgentConfig  <code>dataclass</code>","text":"<pre><code>AgentConfig(\n    system_template: str = \"You are a helpful assistant that can do anything.\",\n    instance_template: str = \"Your task: {{task}}. Please reply with a single shell command in triple backticks. To finish, the first line of the output of the shell command must be 'MICRO_SWE_AGENT_FINAL_OUTPUT'.\",\n    timeout_template: str = \"The command timed out. Please change your command and make sure it doesn't require input.\",\n    format_error_template: str = \"Please always provide EXACTLY ONE action in triple backticks.\",\n    action_observation_template: str = \"Observation: {{output}}\",\n    step_limit: int = 0,\n    cost_limit: float = 3.0,\n)\n</code></pre>"},{"location":"reference/agents/default/#microsweagent.agents.default.AgentConfig.system_template","title":"system_template  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>system_template: str = (\n    \"You are a helpful assistant that can do anything.\"\n)\n</code></pre>"},{"location":"reference/agents/default/#microsweagent.agents.default.AgentConfig.instance_template","title":"instance_template  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>instance_template: str = \"Your task: {{task}}. Please reply with a single shell command in triple backticks. To finish, the first line of the output of the shell command must be 'MICRO_SWE_AGENT_FINAL_OUTPUT'.\"\n</code></pre>"},{"location":"reference/agents/default/#microsweagent.agents.default.AgentConfig.timeout_template","title":"timeout_template  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>timeout_template: str = \"The command timed out. Please change your command and make sure it doesn't require input.\"\n</code></pre>"},{"location":"reference/agents/default/#microsweagent.agents.default.AgentConfig.format_error_template","title":"format_error_template  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>format_error_template: str = \"Please always provide EXACTLY ONE action in triple backticks.\"\n</code></pre>"},{"location":"reference/agents/default/#microsweagent.agents.default.AgentConfig.action_observation_template","title":"action_observation_template  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>action_observation_template: str = \"Observation: {{output}}\"\n</code></pre>"},{"location":"reference/agents/default/#microsweagent.agents.default.AgentConfig.step_limit","title":"step_limit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>step_limit: int = 0\n</code></pre>"},{"location":"reference/agents/default/#microsweagent.agents.default.AgentConfig.cost_limit","title":"cost_limit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>cost_limit: float = 3.0\n</code></pre>"},{"location":"reference/agents/default/#microsweagent.agents.default.DefaultAgent","title":"microsweagent.agents.default.DefaultAgent","text":"<pre><code>DefaultAgent(\n    model: Model,\n    env: Environment,\n    config_class: Callable = AgentConfig,\n    **kwargs,\n)\n</code></pre> Source code in <code>src/microsweagent/agents/default.py</code> <pre><code>def __init__(self, model: Model, env: Environment, config_class: Callable = AgentConfig, **kwargs):\n    self.config = config_class(**kwargs)\n    self.messages: list[dict] = []\n    self.model = model\n    self.env = env\n</code></pre>"},{"location":"reference/agents/default/#microsweagent.agents.default.DefaultAgent.config","title":"config  <code>instance-attribute</code>","text":"<pre><code>config = config_class(**kwargs)\n</code></pre>"},{"location":"reference/agents/default/#microsweagent.agents.default.DefaultAgent.messages","title":"messages  <code>instance-attribute</code>","text":"<pre><code>messages: list[dict] = []\n</code></pre>"},{"location":"reference/agents/default/#microsweagent.agents.default.DefaultAgent.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = model\n</code></pre>"},{"location":"reference/agents/default/#microsweagent.agents.default.DefaultAgent.env","title":"env  <code>instance-attribute</code>","text":"<pre><code>env = env\n</code></pre>"},{"location":"reference/agents/default/#microsweagent.agents.default.DefaultAgent.add_message","title":"add_message","text":"<pre><code>add_message(role: str, content: str)\n</code></pre> Source code in <code>src/microsweagent/agents/default.py</code> <pre><code>def add_message(self, role: str, content: str):\n    self.messages.append({\"role\": role, \"content\": content})\n</code></pre>"},{"location":"reference/agents/default/#microsweagent.agents.default.DefaultAgent.run","title":"run","text":"<pre><code>run(task: str) -&gt; tuple[str, str]\n</code></pre> <p>Run step() until agent is finished. Return exit status &amp; message</p> Source code in <code>src/microsweagent/agents/default.py</code> <pre><code>def run(self, task: str) -&gt; tuple[str, str]:\n    \"\"\"Run step() until agent is finished. Return exit status &amp; message\"\"\"\n    self.messages = []\n    self.add_message(\"system\", self.config.system_template)\n    self.add_message(\"user\", Template(self.config.instance_template).render(task=task))\n    while True:\n        try:\n            self.step()\n        except NonTerminatingException as e:\n            self.add_message(\"user\", str(e))\n        except TerminatingException as e:\n            self.add_message(\"user\", str(e))\n            return type(e).__name__, str(e)\n</code></pre>"},{"location":"reference/agents/default/#microsweagent.agents.default.DefaultAgent.step","title":"step","text":"<pre><code>step() -&gt; str\n</code></pre> <p>Query the LM, execute the action, return the observation.</p> Source code in <code>src/microsweagent/agents/default.py</code> <pre><code>def step(self) -&gt; str:\n    \"\"\"Query the LM, execute the action, return the observation.\"\"\"\n    message = self.query()\n    self.add_message(\"assistant\", message)\n    observation = self.get_observation(message)\n    self.add_message(\"user\", observation)\n    return observation\n</code></pre>"},{"location":"reference/agents/default/#microsweagent.agents.default.DefaultAgent.query","title":"query","text":"<pre><code>query() -&gt; str\n</code></pre> <p>Query the model and return the response.</p> Source code in <code>src/microsweagent/agents/default.py</code> <pre><code>def query(self) -&gt; str:\n    \"\"\"Query the model and return the response.\"\"\"\n    if 0 &lt; self.config.step_limit &lt;= self.model.n_calls or 0 &lt; self.config.cost_limit &lt;= self.model.cost:\n        raise LimitsExceeded()\n\n    return self.model.query(self.messages)\n</code></pre>"},{"location":"reference/agents/default/#microsweagent.agents.default.DefaultAgent.get_observation","title":"get_observation","text":"<pre><code>get_observation(message: str) -&gt; str\n</code></pre> <p>Execute the action and return the observation.</p> Source code in <code>src/microsweagent/agents/default.py</code> <pre><code>def get_observation(self, message: str) -&gt; str:\n    \"\"\"Execute the action and return the observation.\"\"\"\n    return self.execute_action(self.parse_action(message))\n</code></pre>"},{"location":"reference/agents/default/#microsweagent.agents.default.DefaultAgent.parse_action","title":"parse_action","text":"<pre><code>parse_action(message: str) -&gt; str\n</code></pre> <p>Parse the action from the message. Returns the action.</p> Source code in <code>src/microsweagent/agents/default.py</code> <pre><code>def parse_action(self, message: str) -&gt; str:\n    \"\"\"Parse the action from the message. Returns the action.\"\"\"\n    actions = re.findall(r\"```[a-zA-Z]*\\n(.*?)(?=\\n```|```)\", message, re.DOTALL)\n    if len(actions) == 1:\n        return actions[0].strip()\n    raise FormatError(Template(self.config.format_error_template).render(actions=actions))\n</code></pre>"},{"location":"reference/agents/default/#microsweagent.agents.default.DefaultAgent.execute_action","title":"execute_action","text":"<pre><code>execute_action(action: str) -&gt; str\n</code></pre> Source code in <code>src/microsweagent/agents/default.py</code> <pre><code>def execute_action(self, action: str) -&gt; str:\n    try:\n        output = self.env.execute(action)\n    except (TimeoutError, subprocess.TimeoutExpired):\n        raise ExecutionTimeoutError(Template(self.config.timeout_template).render(action=action))\n    self.has_finished(output)\n    return Template(self.config.action_observation_template).render(output=output)\n</code></pre>"},{"location":"reference/agents/default/#microsweagent.agents.default.DefaultAgent.has_finished","title":"has_finished","text":"<pre><code>has_finished(output: dict[str, str])\n</code></pre> <p>Raises Submitted exception with final output if the agent has finished its task.</p> Source code in <code>src/microsweagent/agents/default.py</code> <pre><code>def has_finished(self, output: dict[str, str]):\n    \"\"\"Raises Submitted exception with final output if the agent has finished its task.\"\"\"\n    if output.get(\"stdout\") and output[\"stdout\"].splitlines()[0] == \"MICRO_SWE_AGENT_FINAL_OUTPUT\":\n        raise Submitted(\"\\n\".join(output[\"stdout\"].splitlines()[1:]))\n</code></pre>"},{"location":"reference/agents/default/#microsweagent.agents.default.NonTerminatingException","title":"microsweagent.agents.default.NonTerminatingException","text":"<p>               Bases: <code>Exception</code></p> <p>Raised for conditions that can be handled by the agent.</p>"},{"location":"reference/agents/default/#microsweagent.agents.default.TerminatingException","title":"microsweagent.agents.default.TerminatingException","text":"<p>               Bases: <code>Exception</code></p> <p>Raised for conditions that terminate the agent.</p>"},{"location":"reference/agents/interactive/","title":"InteractiveAgent","text":""},{"location":"reference/agents/interactive/#microsweagent.agents.interactive.InteractiveAgentConfig","title":"microsweagent.agents.interactive.InteractiveAgentConfig  <code>dataclass</code>","text":"<pre><code>InteractiveAgentConfig(\n    system_template: str = \"You are a helpful assistant that can do anything.\",\n    instance_template: str = \"Your task: {{task}}. Please reply with a single shell command in triple backticks. To finish, the first line of the output of the shell command must be 'MICRO_SWE_AGENT_FINAL_OUTPUT'.\",\n    timeout_template: str = \"The command timed out. Please change your command and make sure it doesn't require input.\",\n    format_error_template: str = \"Please always provide EXACTLY ONE action in triple backticks.\",\n    action_observation_template: str = \"Observation: {{output}}\",\n    step_limit: int = 0,\n    cost_limit: float = 3.0,\n    confirm_actions: bool = True,\n    whitelist_actions: list[str] = list(),\n)\n</code></pre> <p>               Bases: <code>AgentConfig</code></p>"},{"location":"reference/agents/interactive/#microsweagent.agents.interactive.InteractiveAgentConfig.confirm_actions","title":"confirm_actions  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>confirm_actions: bool = True\n</code></pre> <p>Whether to confirm actions.</p>"},{"location":"reference/agents/interactive/#microsweagent.agents.interactive.InteractiveAgentConfig.whitelist_actions","title":"whitelist_actions  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>whitelist_actions: list[str] = field(default_factory=list)\n</code></pre> <p>Never confirm actions that match these regular expressions.</p>"},{"location":"reference/agents/interactive/#microsweagent.agents.interactive.InteractiveAgent","title":"microsweagent.agents.interactive.InteractiveAgent","text":"<pre><code>InteractiveAgent(*args, **kwargs)\n</code></pre> <p>               Bases: <code>DefaultAgent</code></p> Source code in <code>src/microsweagent/agents/interactive.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    super().__init__(*args, config_class=InteractiveAgentConfig, **kwargs)\n    self.cost_last_confirmed = 0.0\n</code></pre>"},{"location":"reference/agents/interactive/#microsweagent.agents.interactive.InteractiveAgent.cost_last_confirmed","title":"cost_last_confirmed  <code>instance-attribute</code>","text":"<pre><code>cost_last_confirmed = 0.0\n</code></pre>"},{"location":"reference/agents/interactive/#microsweagent.agents.interactive.InteractiveAgent.add_message","title":"add_message","text":"<pre><code>add_message(role: str, content: str)\n</code></pre> Source code in <code>src/microsweagent/agents/interactive.py</code> <pre><code>def add_message(self, role: str, content: str):\n    super().add_message(role, content)\n    if role == \"assistant\":\n        console.print(\n            f\"\\n[red][bold]micro-swe-agent[/bold] (step [bold]{self.model.n_calls}[/bold], [bold]${self.model.cost:.2f}[/bold]):[/red]\\n\",\n            end=\"\",\n            highlight=False,\n        )\n    else:\n        console.print(f\"\\n[bold green]{role.capitalize()}[/bold green]:\\n\", end=\"\", highlight=False)\n    console.print(content, highlight=False, markup=False)\n</code></pre>"},{"location":"reference/agents/interactive/#microsweagent.agents.interactive.InteractiveAgent.step","title":"step","text":"<pre><code>step() -&gt; str\n</code></pre> Source code in <code>src/microsweagent/agents/interactive.py</code> <pre><code>def step(self) -&gt; str:\n    # Override the step method to handle user interruption\n    try:\n        return super().step()\n    except KeyboardInterrupt:\n        user_input = self.get_response(\n            \"\\n\\n[bold yellow]Interrupted.[/bold yellow] \"\n            \"[bold green]/h[/bold green] to show help, or [green]continue with comment/command[/green]\"\n            \"\\n[bold yellow]&gt;[/bold yellow] \"\n        )\n        if user_input:\n            raise NonTerminatingException(f\"Interrupted by user: {user_input}\")\n        raise NonTerminatingException(\n            \"Temporary interruption caught. Some actions may have been only partially executed.\"\n        )\n</code></pre>"},{"location":"reference/agents/interactive/#microsweagent.agents.interactive.InteractiveAgent.execute_action","title":"execute_action","text":"<pre><code>execute_action(action: str) -&gt; str\n</code></pre> Source code in <code>src/microsweagent/agents/interactive.py</code> <pre><code>def execute_action(self, action: str) -&gt; str:\n    # Override the execute_action method to handle user confirmation\n    if self.config.confirm_actions and not any(re.match(r, action) for r in self.config.whitelist_actions):\n        if user_input := self.get_response(\n            \"[bold yellow]Execute?[/bold yellow] [green][bold]Enter[/bold] to confirm[/green], \"\n            \"[green bold]/h[/green bold] for help, \"\n            \"or [green]enter comment/command[/green]\\n\"\n            \"[bold yellow]&gt;[/bold yellow] \"\n        ):\n            raise NonTerminatingException(\n                f\"Command not executed. The user rejected your command with the following message: {user_input}\"\n            )\n    return super().execute_action(action)\n</code></pre>"},{"location":"reference/agents/interactive/#microsweagent.agents.interactive.InteractiveAgent.get_response","title":"get_response","text":"<pre><code>get_response(prompt: str) -&gt; str\n</code></pre> Source code in <code>src/microsweagent/agents/interactive.py</code> <pre><code>def get_response(self, prompt: str) -&gt; str:\n    user_input = console.input(prompt)\n    if user_input.strip() == \"/h\":\n        console.print(\n            \"[bold green]/y[/bold green] to enter yolo mode (no need to confirm actions),\\n\"\n            \"[bold green]/x[/bold green] to exit yolo mode\"\n        )\n        return self.get_response(\"[bold yellow]&gt;[/bold yellow] \")\n    if user_input.strip() == \"/y\":\n        self.config.confirm_actions = False\n        console.print(\"Yolo mode [bold red]enabled[/bold red].\")\n        return self.get_response(prompt)\n    if user_input.strip() == \"/x\":\n        self.config.confirm_actions = True\n        console.print(\"Yolo mode [bold green]disabled[/bold green].\")\n        return self.get_response(prompt)\n    return user_input\n</code></pre>"},{"location":"reference/agents/textual/","title":"TextualAgent","text":""},{"location":"reference/agents/textual/#microsweagent.agents.interactive_textual.TextualAgent","title":"microsweagent.agents.interactive_textual.TextualAgent","text":"<pre><code>TextualAgent(app: AgentApp, *args, **kwargs)\n</code></pre> <p>               Bases: <code>DefaultAgent</code></p> <p>Connects the DefaultAgent to the TextualApp.</p> Source code in <code>src/microsweagent/agents/interactive_textual.py</code> <pre><code>def __init__(self, app: \"AgentApp\", *args, **kwargs):\n    \"\"\"Connects the DefaultAgent to the TextualApp.\"\"\"\n    self.app = app\n    super().__init__(*args, config_class=TextualAgentConfig, **kwargs)\n</code></pre>"},{"location":"reference/agents/textual/#microsweagent.agents.interactive_textual.TextualAgent.app","title":"app  <code>instance-attribute</code>","text":"<pre><code>app = app\n</code></pre>"},{"location":"reference/agents/textual/#microsweagent.agents.interactive_textual.TextualAgent.add_message","title":"add_message","text":"<pre><code>add_message(role: str, content: str)\n</code></pre> Source code in <code>src/microsweagent/agents/interactive_textual.py</code> <pre><code>def add_message(self, role: str, content: str):\n    super().add_message(role, content)\n    if self.app.agent_state != \"UNINITIALIZED\":\n        self.app.call_from_thread(self.app.on_message_added)\n</code></pre>"},{"location":"reference/agents/textual/#microsweagent.agents.interactive_textual.TextualAgent.run","title":"run","text":"<pre><code>run(task: str) -&gt; tuple[str, str]\n</code></pre> Source code in <code>src/microsweagent/agents/interactive_textual.py</code> <pre><code>def run(self, task: str) -&gt; tuple[str, str]:\n    try:\n        exit_status, result = super().run(task)\n    except Exception as e:\n        result = str(e)\n        self.app.call_from_thread(self.app.on_agent_finished, \"ERROR\", result)\n        return \"ERROR\", result\n    else:\n        self.app.call_from_thread(self.app.on_agent_finished, exit_status, result)\n    return exit_status, result\n</code></pre>"},{"location":"reference/agents/textual/#microsweagent.agents.interactive_textual.TextualAgent.execute_action","title":"execute_action","text":"<pre><code>execute_action(action: str) -&gt; str\n</code></pre> Source code in <code>src/microsweagent/agents/interactive_textual.py</code> <pre><code>def execute_action(self, action: str) -&gt; str:\n    if self.config.confirm_actions and not any(re.match(r, action) for r in self.config.whitelist_actions):\n        if result := self.app.confirmation_container.request_confirmation(action):\n            raise NonTerminatingException(f\"Command not executed: {result}\")\n    return super().execute_action(action)\n</code></pre>"},{"location":"reference/agents/textual/#microsweagent.agents.interactive_textual.AgentApp","title":"microsweagent.agents.interactive_textual.AgentApp","text":"<pre><code>AgentApp(model, env, task: str, **kwargs)\n</code></pre> <p>               Bases: <code>App</code></p> Source code in <code>src/microsweagent/agents/interactive_textual.py</code> <pre><code>def __init__(self, model, env, task: str, **kwargs):\n    css_path = os.environ.get(\n        \"MSWEA_LOCAL2_STYLE_PATH\", str(Path(__file__).parent.parent / \"config\" / \"local2.tcss\")\n    )\n    self.__class__.CSS = Path(css_path).read_text()\n    super().__init__()\n    self.agent_state = \"UNINITIALIZED\"\n    self.agent_task = task\n    self.agent = TextualAgent(self, model=model, env=env, **kwargs)\n    self._i_step = 0\n    self.n_steps = 1\n    self.confirmation_container = ConfirmationPromptContainer(self)\n    self.log_handler = AddLogEmitCallback(lambda record: self.call_from_thread(self.on_log_message_emitted, record))\n    logging.getLogger().addHandler(self.log_handler)\n    self._spinner = Spinner(\"dots\")\n</code></pre>"},{"location":"reference/agents/textual/#microsweagent.agents.interactive_textual.AgentApp.BINDINGS","title":"BINDINGS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BINDINGS = [\n    Binding(\"right,l\", \"next_step\", \"Step++\"),\n    Binding(\"left,h\", \"previous_step\", \"Step--\"),\n    Binding(\"0\", \"first_step\", \"Step=0\"),\n    Binding(\"$\", \"last_step\", \"Step=-1\"),\n    Binding(\"j,down\", \"scroll_down\", \"Scroll down\"),\n    Binding(\"k,up\", \"scroll_up\", \"Scroll up\"),\n    Binding(\"q\", \"quit\", \"Quit\"),\n    Binding(\"y\", \"toggle_yolo\", \"Toggle YOLO Mode\"),\n]\n</code></pre>"},{"location":"reference/agents/textual/#microsweagent.agents.interactive_textual.AgentApp.agent_state","title":"agent_state  <code>instance-attribute</code>","text":"<pre><code>agent_state = 'UNINITIALIZED'\n</code></pre>"},{"location":"reference/agents/textual/#microsweagent.agents.interactive_textual.AgentApp.agent_task","title":"agent_task  <code>instance-attribute</code>","text":"<pre><code>agent_task = task\n</code></pre>"},{"location":"reference/agents/textual/#microsweagent.agents.interactive_textual.AgentApp.agent","title":"agent  <code>instance-attribute</code>","text":"<pre><code>agent = TextualAgent(self, model=model, env=env, **kwargs)\n</code></pre>"},{"location":"reference/agents/textual/#microsweagent.agents.interactive_textual.AgentApp.n_steps","title":"n_steps  <code>instance-attribute</code>","text":"<pre><code>n_steps = 1\n</code></pre>"},{"location":"reference/agents/textual/#microsweagent.agents.interactive_textual.AgentApp.confirmation_container","title":"confirmation_container  <code>instance-attribute</code>","text":"<pre><code>confirmation_container = ConfirmationPromptContainer(self)\n</code></pre>"},{"location":"reference/agents/textual/#microsweagent.agents.interactive_textual.AgentApp.log_handler","title":"log_handler  <code>instance-attribute</code>","text":"<pre><code>log_handler = AddLogEmitCallback(\n    lambda record: call_from_thread(\n        on_log_message_emitted, record\n    )\n)\n</code></pre>"},{"location":"reference/agents/textual/#microsweagent.agents.interactive_textual.AgentApp.i_step","title":"i_step  <code>property</code> <code>writable</code>","text":"<pre><code>i_step: int\n</code></pre> <p>Current step index.</p>"},{"location":"reference/agents/textual/#microsweagent.agents.interactive_textual.AgentApp.compose","title":"compose","text":"<pre><code>compose() -&gt; ComposeResult\n</code></pre> Source code in <code>src/microsweagent/agents/interactive_textual.py</code> <pre><code>def compose(self) -&gt; ComposeResult:\n    yield Header()\n    with Container(id=\"main\"):\n        with VerticalScroll():\n            yield Vertical(id=\"content\")\n        yield self.confirmation_container\n    yield Footer()\n</code></pre>"},{"location":"reference/agents/textual/#microsweagent.agents.interactive_textual.AgentApp.on_mount","title":"on_mount","text":"<pre><code>on_mount() -&gt; None\n</code></pre> Source code in <code>src/microsweagent/agents/interactive_textual.py</code> <pre><code>def on_mount(self) -&gt; None:\n    self.agent_state = \"RUNNING\"\n    self.update_content()\n    self.set_interval(1 / 8, self._update_headers)\n    threading.Thread(target=lambda: self.agent.run(self.agent_task), daemon=True).start()\n</code></pre>"},{"location":"reference/agents/textual/#microsweagent.agents.interactive_textual.AgentApp.on_message_added","title":"on_message_added","text":"<pre><code>on_message_added() -&gt; None\n</code></pre> Source code in <code>src/microsweagent/agents/interactive_textual.py</code> <pre><code>def on_message_added(self) -&gt; None:\n    auto_follow = self.i_step == self.n_steps - 1\n    self.n_steps = len(_messages_to_steps(self.agent.messages))\n    self.update_content()\n    if auto_follow:\n        self.action_last_step()\n</code></pre>"},{"location":"reference/agents/textual/#microsweagent.agents.interactive_textual.AgentApp.on_log_message_emitted","title":"on_log_message_emitted","text":"<pre><code>on_log_message_emitted(record: LogRecord) -&gt; None\n</code></pre> <p>Handle log messages of warning level or higher by showing them as notifications.</p> Source code in <code>src/microsweagent/agents/interactive_textual.py</code> <pre><code>def on_log_message_emitted(self, record: logging.LogRecord) -&gt; None:\n    \"\"\"Handle log messages of warning level or higher by showing them as notifications.\"\"\"\n    if record.levelno &gt;= logging.WARNING:\n        self.notify(f\"[{record.levelname}] {record.getMessage()}\", severity=\"warning\")\n</code></pre>"},{"location":"reference/agents/textual/#microsweagent.agents.interactive_textual.AgentApp.on_unmount","title":"on_unmount","text":"<pre><code>on_unmount() -&gt; None\n</code></pre> <p>Clean up the log handler when the app shuts down.</p> Source code in <code>src/microsweagent/agents/interactive_textual.py</code> <pre><code>def on_unmount(self) -&gt; None:\n    \"\"\"Clean up the log handler when the app shuts down.\"\"\"\n    if hasattr(self, \"log_handler\"):\n        logging.getLogger().removeHandler(self.log_handler)\n</code></pre>"},{"location":"reference/agents/textual/#microsweagent.agents.interactive_textual.AgentApp.on_agent_finished","title":"on_agent_finished","text":"<pre><code>on_agent_finished(exit_status: str, result: str)\n</code></pre> Source code in <code>src/microsweagent/agents/interactive_textual.py</code> <pre><code>def on_agent_finished(self, exit_status: str, result: str):\n    self.agent_state = \"STOPPED\"\n    self.notify(f\"Agent finished with status: {exit_status}\")\n    self.exit_status = exit_status\n    self.result = result\n    self.update_content()\n</code></pre>"},{"location":"reference/agents/textual/#microsweagent.agents.interactive_textual.AgentApp.update_content","title":"update_content","text":"<pre><code>update_content() -&gt; None\n</code></pre> Source code in <code>src/microsweagent/agents/interactive_textual.py</code> <pre><code>def update_content(self) -&gt; None:\n    container = self.query_one(\"#content\", Vertical)\n    container.remove_children()\n    items = _messages_to_steps(self.agent.messages)\n\n    if not items:\n        container.mount(Static(\"Waiting for agent to start...\"))\n        return\n\n    for message in items[self.i_step]:\n        if isinstance(message[\"content\"], list):\n            content_str = \"\\n\".join([item[\"text\"] for item in message[\"content\"]])\n        else:\n            content_str = str(message[\"content\"])\n        message_container = Vertical(classes=\"message-container\")\n        container.mount(message_container)\n        role = message[\"role\"].replace(\"assistant\", \"micro-swe-agent\")\n        message_container.mount(Static(role.upper(), classes=\"message-header\"))\n        message_container.mount(Static(Text(content_str, no_wrap=False), classes=\"message-content\"))\n\n    if self.confirmation_container._pending_action is not None:\n        self.agent_state = \"AWAITING_CONFIRMATION\"\n    self.confirmation_container.display = (\n        self.confirmation_container._pending_action is not None and self.i_step == len(items) - 1\n    )\n    if self.confirmation_container.display:\n        self.confirmation_container.focus()\n\n    self._update_headers()\n    self.refresh()\n</code></pre>"},{"location":"reference/agents/textual/#microsweagent.agents.interactive_textual.AgentApp.action_toggle_yolo","title":"action_toggle_yolo","text":"<pre><code>action_toggle_yolo()\n</code></pre> Source code in <code>src/microsweagent/agents/interactive_textual.py</code> <pre><code>def action_toggle_yolo(self):\n    self.agent.config.confirm_actions = not self.agent.config.confirm_actions\n    self.notify(f\"YOLO mode {'disabled' if self.agent.config.confirm_actions else 'enabled'}\")\n</code></pre>"},{"location":"reference/agents/textual/#microsweagent.agents.interactive_textual.AgentApp.action_next_step","title":"action_next_step","text":"<pre><code>action_next_step() -&gt; None\n</code></pre> Source code in <code>src/microsweagent/agents/interactive_textual.py</code> <pre><code>def action_next_step(self) -&gt; None:\n    self.i_step += 1\n</code></pre>"},{"location":"reference/agents/textual/#microsweagent.agents.interactive_textual.AgentApp.action_previous_step","title":"action_previous_step","text":"<pre><code>action_previous_step() -&gt; None\n</code></pre> Source code in <code>src/microsweagent/agents/interactive_textual.py</code> <pre><code>def action_previous_step(self) -&gt; None:\n    self.i_step -= 1\n</code></pre>"},{"location":"reference/agents/textual/#microsweagent.agents.interactive_textual.AgentApp.action_first_step","title":"action_first_step","text":"<pre><code>action_first_step() -&gt; None\n</code></pre> Source code in <code>src/microsweagent/agents/interactive_textual.py</code> <pre><code>def action_first_step(self) -&gt; None:\n    self.i_step = 0\n</code></pre>"},{"location":"reference/agents/textual/#microsweagent.agents.interactive_textual.AgentApp.action_last_step","title":"action_last_step","text":"<pre><code>action_last_step() -&gt; None\n</code></pre> Source code in <code>src/microsweagent/agents/interactive_textual.py</code> <pre><code>def action_last_step(self) -&gt; None:\n    self.i_step = self.n_steps - 1\n</code></pre>"},{"location":"reference/agents/textual/#microsweagent.agents.interactive_textual.AgentApp.action_scroll_down","title":"action_scroll_down","text":"<pre><code>action_scroll_down() -&gt; None\n</code></pre> Source code in <code>src/microsweagent/agents/interactive_textual.py</code> <pre><code>def action_scroll_down(self) -&gt; None:\n    vs = self.query_one(VerticalScroll)\n    vs.scroll_to(y=vs.scroll_target_y + 15)\n</code></pre>"},{"location":"reference/agents/textual/#microsweagent.agents.interactive_textual.AgentApp.action_scroll_up","title":"action_scroll_up","text":"<pre><code>action_scroll_up() -&gt; None\n</code></pre> Source code in <code>src/microsweagent/agents/interactive_textual.py</code> <pre><code>def action_scroll_up(self) -&gt; None:\n    vs = self.query_one(VerticalScroll)\n    vs.scroll_to(y=vs.scroll_target_y - 15)\n</code></pre>"},{"location":"reference/agents/textual/#microsweagent.agents.interactive_textual.ConfirmationPromptContainer","title":"microsweagent.agents.interactive_textual.ConfirmationPromptContainer","text":"<pre><code>ConfirmationPromptContainer(app: AgentApp)\n</code></pre> <p>               Bases: <code>Container</code></p> <p>This class is responsible for handling the action execution confirmation.</p> Source code in <code>src/microsweagent/agents/interactive_textual.py</code> <pre><code>def __init__(self, app: \"AgentApp\"):\n    \"\"\"This class is responsible for handling the action execution confirmation.\"\"\"\n    super().__init__(id=\"confirmation-container\")\n    self._app = app\n    self.rejecting = False\n    self.can_focus = True\n    self.display = False\n\n    self._pending_action: str | None = None\n    self._confirmation_event = threading.Event()\n    self._confirmation_result: str | None = None\n\n    self.exit_status: str | None = None\n    self.result: str | None = None\n</code></pre>"},{"location":"reference/agents/textual/#microsweagent.agents.interactive_textual.ConfirmationPromptContainer.rejecting","title":"rejecting  <code>instance-attribute</code>","text":"<pre><code>rejecting = False\n</code></pre>"},{"location":"reference/agents/textual/#microsweagent.agents.interactive_textual.ConfirmationPromptContainer.can_focus","title":"can_focus  <code>instance-attribute</code>","text":"<pre><code>can_focus = True\n</code></pre>"},{"location":"reference/agents/textual/#microsweagent.agents.interactive_textual.ConfirmationPromptContainer.display","title":"display  <code>instance-attribute</code>","text":"<pre><code>display = False\n</code></pre>"},{"location":"reference/agents/textual/#microsweagent.agents.interactive_textual.ConfirmationPromptContainer.exit_status","title":"exit_status  <code>instance-attribute</code>","text":"<pre><code>exit_status: str | None = None\n</code></pre>"},{"location":"reference/agents/textual/#microsweagent.agents.interactive_textual.ConfirmationPromptContainer.result","title":"result  <code>instance-attribute</code>","text":"<pre><code>result: str | None = None\n</code></pre>"},{"location":"reference/agents/textual/#microsweagent.agents.interactive_textual.ConfirmationPromptContainer.compose","title":"compose","text":"<pre><code>compose() -&gt; ComposeResult\n</code></pre> Source code in <code>src/microsweagent/agents/interactive_textual.py</code> <pre><code>def compose(self) -&gt; ComposeResult:\n    yield Static(\n        \"Press [bold]ENTER[/bold] to confirm action or [bold]BACKSPACE[/bold] to reject (or [bold]y[/bold] to toggle YOLO mode)\",\n        classes=\"confirmation-prompt\",\n    )\n    yield TextArea(id=\"rejection-input\")\n    rejection_help = Static(\n        \"Press [bold]Ctrl+D[/bold] to submit rejection message\",\n        id=\"rejection-help\",\n        classes=\"rejection-help\",\n    )\n    rejection_help.display = False\n    yield rejection_help\n</code></pre>"},{"location":"reference/agents/textual/#microsweagent.agents.interactive_textual.ConfirmationPromptContainer.request_confirmation","title":"request_confirmation","text":"<pre><code>request_confirmation(action: str) -&gt; str | None\n</code></pre> <p>Request confirmation for an action. Returns rejection message or None.</p> Source code in <code>src/microsweagent/agents/interactive_textual.py</code> <pre><code>def request_confirmation(self, action: str) -&gt; str | None:\n    \"\"\"Request confirmation for an action. Returns rejection message or None.\"\"\"\n    self._confirmation_event.clear()\n    self._confirmation_result = None\n    self._pending_action = action\n    self._app.call_from_thread(self._app.update_content)\n    self._confirmation_event.wait()\n    return self._confirmation_result\n</code></pre>"},{"location":"reference/agents/textual/#microsweagent.agents.interactive_textual.ConfirmationPromptContainer.on_key","title":"on_key","text":"<pre><code>on_key(event: Key) -&gt; None\n</code></pre> Source code in <code>src/microsweagent/agents/interactive_textual.py</code> <pre><code>def on_key(self, event: Key) -&gt; None:\n    if self.rejecting and event.key == \"ctrl+d\":\n        event.prevent_default()\n        rejection_input = self.query_one(\"#rejection-input\", TextArea)\n        self._complete_confirmation(rejection_input.text)\n        return\n    if not self.rejecting:\n        if event.key == \"enter\":\n            event.prevent_default()\n            self._complete_confirmation(None)\n        elif event.key == \"backspace\":\n            event.prevent_default()\n            self.rejecting = True\n            rejection_input = self.query_one(\"#rejection-input\", TextArea)\n            rejection_input.display = True\n            rejection_input.focus()\n            rejection_help = self.query_one(\"#rejection-help\", Static)\n            rejection_help.display = True\n</code></pre>"},{"location":"reference/agents/textual/#microsweagent.agents.interactive_textual.AddLogEmitCallback","title":"microsweagent.agents.interactive_textual.AddLogEmitCallback","text":"<pre><code>AddLogEmitCallback(callback)\n</code></pre> <p>               Bases: <code>Handler</code></p> <p>Custom log handler that forwards messages via callback.</p> Source code in <code>src/microsweagent/agents/interactive_textual.py</code> <pre><code>def __init__(self, callback):\n    \"\"\"Custom log handler that forwards messages via callback.\"\"\"\n    super().__init__()\n    self.callback = callback\n</code></pre>"},{"location":"reference/agents/textual/#microsweagent.agents.interactive_textual.AddLogEmitCallback.callback","title":"callback  <code>instance-attribute</code>","text":"<pre><code>callback = callback\n</code></pre>"},{"location":"reference/agents/textual/#microsweagent.agents.interactive_textual.AddLogEmitCallback.emit","title":"emit","text":"<pre><code>emit(record: LogRecord)\n</code></pre> Source code in <code>src/microsweagent/agents/interactive_textual.py</code> <pre><code>def emit(self, record: logging.LogRecord):\n    self.callback(record)\n</code></pre>"},{"location":"reference/environments/docker/","title":"DockerEnvironment","text":""},{"location":"reference/environments/docker/#microsweagent.environments.docker.DockerEnvironmentConfig","title":"microsweagent.environments.docker.DockerEnvironmentConfig  <code>dataclass</code>","text":"<pre><code>DockerEnvironmentConfig(\n    image: str,\n    cwd: str = \"/\",\n    env: dict[str, str] = dict(),\n    forward_env: list[str] = list(),\n    timeout: int = 30,\n    executable: str = \"docker\",\n    run_args: list[str] = list(),\n)\n</code></pre>"},{"location":"reference/environments/docker/#microsweagent.environments.docker.DockerEnvironmentConfig.image","title":"image  <code>instance-attribute</code>","text":"<pre><code>image: str\n</code></pre>"},{"location":"reference/environments/docker/#microsweagent.environments.docker.DockerEnvironmentConfig.cwd","title":"cwd  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>cwd: str = '/'\n</code></pre> <p>Working directory in which to execute commands.</p>"},{"location":"reference/environments/docker/#microsweagent.environments.docker.DockerEnvironmentConfig.env","title":"env  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>env: dict[str, str] = field(default_factory=dict)\n</code></pre> <p>Environment variables to set in the container.</p>"},{"location":"reference/environments/docker/#microsweagent.environments.docker.DockerEnvironmentConfig.forward_env","title":"forward_env  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>forward_env: list[str] = field(default_factory=list)\n</code></pre> <p>Environment variables to forward to the container. Variables are only forwarded if they are set in the host environment. In case of conflict with <code>env</code>, the <code>env</code> variables take precedence.</p>"},{"location":"reference/environments/docker/#microsweagent.environments.docker.DockerEnvironmentConfig.timeout","title":"timeout  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>timeout: int = 30\n</code></pre> <p>Timeout for executing commands in the container.</p>"},{"location":"reference/environments/docker/#microsweagent.environments.docker.DockerEnvironmentConfig.executable","title":"executable  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>executable: str = 'docker'\n</code></pre> <p>Path to the docker/container executable.</p>"},{"location":"reference/environments/docker/#microsweagent.environments.docker.DockerEnvironmentConfig.run_args","title":"run_args  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_args: list[str] = field(default_factory=list)\n</code></pre> <p>Additional arguments to pass to the docker/container executable.</p>"},{"location":"reference/environments/docker/#microsweagent.environments.docker.DockerEnvironment","title":"microsweagent.environments.docker.DockerEnvironment","text":"<pre><code>DockerEnvironment(\n    *,\n    config_class: type = DockerEnvironmentConfig,\n    **kwargs,\n)\n</code></pre> <p>This class executes bash commands in a Docker container using direct docker commands. See <code>DockerEnvironmentConfig</code> for keyword arguments.</p> Source code in <code>src/microsweagent/environments/docker.py</code> <pre><code>def __init__(self, *, config_class: type = DockerEnvironmentConfig, **kwargs):\n    \"\"\"This class executes bash commands in a Docker container using direct docker commands.\n    See `DockerEnvironmentConfig` for keyword arguments.\n    \"\"\"\n    self.container_id: str | None = None\n    self.config = config_class(**kwargs)\n    self._start_container()\n</code></pre>"},{"location":"reference/environments/docker/#microsweagent.environments.docker.DockerEnvironment.container_id","title":"container_id  <code>instance-attribute</code>","text":"<pre><code>container_id: str | None = None\n</code></pre>"},{"location":"reference/environments/docker/#microsweagent.environments.docker.DockerEnvironment.config","title":"config  <code>instance-attribute</code>","text":"<pre><code>config = config_class(**kwargs)\n</code></pre>"},{"location":"reference/environments/docker/#microsweagent.environments.docker.DockerEnvironment.execute","title":"execute","text":"<pre><code>execute(command: str, cwd: str = '') -&gt; dict[str, Any]\n</code></pre> <p>Execute a command in the Docker container and return the result as a dict.</p> Source code in <code>src/microsweagent/environments/docker.py</code> <pre><code>def execute(self, command: str, cwd: str = \"\") -&gt; dict[str, Any]:\n    \"\"\"Execute a command in the Docker container and return the result as a dict.\"\"\"\n    cwd = cwd or self.config.cwd\n    assert self.container_id, \"Container not started\"\n\n    cmd = [self.config.executable, \"exec\", \"-w\", cwd]\n    for key in self.config.forward_env:\n        if (value := os.getenv(key)) is not None:\n            cmd.extend([\"-e\", f\"{key}={value}\"])\n    for key, value in self.config.env.items():\n        cmd.extend([\"-e\", f\"{key}={value}\"])\n    cmd.extend([self.container_id, \"bash\", \"-c\", command])\n\n    return vars(\n        subprocess.run(\n            cmd,\n            capture_output=True,\n            text=True,\n            timeout=self.config.timeout,\n        )\n    )\n</code></pre>"},{"location":"reference/environments/docker/#microsweagent.environments.docker.DockerEnvironment.cleanup","title":"cleanup","text":"<pre><code>cleanup()\n</code></pre> <p>Stop and remove the Docker container.</p> Source code in <code>src/microsweagent/environments/docker.py</code> <pre><code>def cleanup(self):\n    \"\"\"Stop and remove the Docker container.\"\"\"\n    if getattr(self, \"container_id\", None) is not None:  # if init fails early, container_id might not be set\n        print(f\"Stopping container {self.container_id} (might take a second)\")\n        with suppress(subprocess.TimeoutExpired):\n            subprocess.run([\"docker\", \"stop\", self.container_id], capture_output=True, check=False, timeout=30)  # type: ignore\n        with suppress(subprocess.TimeoutExpired):\n            subprocess.run([\"docker\", \"rm\", \"-f\", self.container_id], capture_output=True, check=False, timeout=30)  # type: ignore\n</code></pre>"},{"location":"reference/environments/local/","title":"LocalEnvironment","text":""},{"location":"reference/environments/local/#microsweagent.environments.local.LocalEnvironmentConfig","title":"microsweagent.environments.local.LocalEnvironmentConfig  <code>dataclass</code>","text":"<pre><code>LocalEnvironmentConfig(\n    cwd: str = \"\",\n    env: dict[str, str] = dict(),\n    timeout: int = 30,\n)\n</code></pre>"},{"location":"reference/environments/local/#microsweagent.environments.local.LocalEnvironmentConfig.cwd","title":"cwd  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>cwd: str = ''\n</code></pre>"},{"location":"reference/environments/local/#microsweagent.environments.local.LocalEnvironmentConfig.env","title":"env  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>env: dict[str, str] = field(default_factory=dict)\n</code></pre>"},{"location":"reference/environments/local/#microsweagent.environments.local.LocalEnvironmentConfig.timeout","title":"timeout  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>timeout: int = 30\n</code></pre>"},{"location":"reference/environments/local/#microsweagent.environments.local.LocalEnvironment","title":"microsweagent.environments.local.LocalEnvironment","text":"<pre><code>LocalEnvironment(**kwargs)\n</code></pre> <p>This class executes bash commands directly on the local machine.</p> Source code in <code>src/microsweagent/environments/local.py</code> <pre><code>def __init__(self, **kwargs):\n    \"\"\"This class executes bash commands directly on the local machine.\"\"\"\n    self.config = LocalEnvironmentConfig(**kwargs)\n</code></pre>"},{"location":"reference/environments/local/#microsweagent.environments.local.LocalEnvironment.config","title":"config  <code>instance-attribute</code>","text":"<pre><code>config = LocalEnvironmentConfig(**kwargs)\n</code></pre>"},{"location":"reference/environments/local/#microsweagent.environments.local.LocalEnvironment.execute","title":"execute","text":"<pre><code>execute(command: str, cwd: str = '')\n</code></pre> <p>Execute a command in the local environment and return the result as a dict.</p> Source code in <code>src/microsweagent/environments/local.py</code> <pre><code>def execute(self, command: str, cwd: str = \"\"):\n    \"\"\"Execute a command in the local environment and return the result as a dict.\"\"\"\n    cwd = cwd or self.config.cwd or os.getcwd()\n    return vars(\n        subprocess.run(\n            command,\n            shell=True,\n            capture_output=True,\n            text=True,\n            cwd=cwd,\n            env=os.environ | self.config.env,\n            timeout=self.config.timeout,\n        )\n    )\n</code></pre>"},{"location":"reference/environments/swerex_docker/","title":"SwerexDockerEnvironment","text":""},{"location":"reference/environments/swerex_docker/#microsweagent.environments.extra.swerex_docker.SwerexDockerEnvironment","title":"microsweagent.environments.extra.swerex_docker.SwerexDockerEnvironment","text":"<pre><code>SwerexDockerEnvironment(**kwargs)\n</code></pre> <p>This class executes bash commands in a Docker container using SWE-ReX for sandboxing.</p> Source code in <code>src/microsweagent/environments/extra/swerex_docker.py</code> <pre><code>def __init__(self, **kwargs):\n    \"\"\"This class executes bash commands in a Docker container using SWE-ReX for sandboxing.\"\"\"\n    self.config = SwerexDockerEnvironmentConfig(**kwargs)\n    self.deployment = DockerDeployment(image=self.config.image, **self.config.deployment_extra_kwargs)\n    asyncio.run(self.deployment.start())\n</code></pre>"},{"location":"reference/environments/swerex_docker/#microsweagent.environments.extra.swerex_docker.SwerexDockerEnvironment.config","title":"config  <code>instance-attribute</code>","text":"<pre><code>config = SwerexDockerEnvironmentConfig(**kwargs)\n</code></pre>"},{"location":"reference/environments/swerex_docker/#microsweagent.environments.extra.swerex_docker.SwerexDockerEnvironment.deployment","title":"deployment  <code>instance-attribute</code>","text":"<pre><code>deployment = DockerDeployment(\n    image=image, **deployment_extra_kwargs\n)\n</code></pre>"},{"location":"reference/environments/swerex_docker/#microsweagent.environments.extra.swerex_docker.SwerexDockerEnvironment.execute","title":"execute","text":"<pre><code>execute(command: str, cwd: str = '') -&gt; dict[str, Any]\n</code></pre> <p>Execute a command in the environment and return the raw output.</p> Source code in <code>src/microsweagent/environments/extra/swerex_docker.py</code> <pre><code>def execute(self, command: str, cwd: str = \"\") -&gt; dict[str, Any]:\n    \"\"\"Execute a command in the environment and return the raw output.\"\"\"\n    output = asyncio.run(\n        self.deployment.runtime.execute(\n            RexCommand(\n                command=command, shell=True, check=False, cwd=cwd or self.config.cwd, timeout=self.config.timeout\n            )\n        )\n    )\n    return {\n        \"stdout\": output.stdout,\n        \"stderr\": output.stderr,\n        \"returncode\": output.exit_code,\n    }\n</code></pre>"},{"location":"reference/models/anthropic/","title":"AnthropicModel","text":""},{"location":"reference/models/anthropic/#microsweagent.models.anthropic.AnthropicModel","title":"microsweagent.models.anthropic.AnthropicModel","text":"<pre><code>AnthropicModel(**kwargs)\n</code></pre> <p>               Bases: <code>LitellmModel</code></p> <p>For the use of anthropic models, we need to add explicit cache control marks to the messages or we lose out on the benefits of the cache. Because break points are limited per key, we also need to rotate between different keys if running with multiple agents in parallel threads.</p> Source code in <code>src/microsweagent/models/litellm_model.py</code> <pre><code>def __init__(self, **kwargs):\n    self.config = LitellmModelConfig(**kwargs)\n    self.cost = 0.0\n    self.n_calls = 0\n</code></pre>"},{"location":"reference/models/anthropic/#microsweagent.models.anthropic.AnthropicModel.query","title":"query","text":"<pre><code>query(messages: list[dict], **kwargs) -&gt; str\n</code></pre> Source code in <code>src/microsweagent/models/anthropic.py</code> <pre><code>def query(self, messages: list[dict], **kwargs) -&gt; str:\n    api_key = None\n    if rotating_keys := os.getenv(\"ANTHROPIC_API_KEYS\"):\n        api_key = get_key_per_thread(rotating_keys.split(\"::\"))\n    return super().query(set_cache_control(messages), api_key=api_key, **kwargs)\n</code></pre>"},{"location":"reference/models/litellm/","title":"LitellmModel","text":""},{"location":"reference/models/litellm/#microsweagent.models.litellm_model.LitellmModelConfig","title":"microsweagent.models.litellm_model.LitellmModelConfig  <code>dataclass</code>","text":"<pre><code>LitellmModelConfig(\n    model_name: str, model_kwargs: dict[str, Any] = dict()\n)\n</code></pre>"},{"location":"reference/models/litellm/#microsweagent.models.litellm_model.LitellmModelConfig.model_name","title":"model_name  <code>instance-attribute</code>","text":"<pre><code>model_name: str\n</code></pre>"},{"location":"reference/models/litellm/#microsweagent.models.litellm_model.LitellmModelConfig.model_kwargs","title":"model_kwargs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_kwargs: dict[str, Any] = field(default_factory=dict)\n</code></pre>"},{"location":"reference/models/litellm/#microsweagent.models.litellm_model.LitellmModel","title":"microsweagent.models.litellm_model.LitellmModel","text":"<pre><code>LitellmModel(**kwargs)\n</code></pre> Source code in <code>src/microsweagent/models/litellm_model.py</code> <pre><code>def __init__(self, **kwargs):\n    self.config = LitellmModelConfig(**kwargs)\n    self.cost = 0.0\n    self.n_calls = 0\n</code></pre>"},{"location":"reference/models/litellm/#microsweagent.models.litellm_model.LitellmModel.config","title":"config  <code>instance-attribute</code>","text":"<pre><code>config = LitellmModelConfig(**kwargs)\n</code></pre>"},{"location":"reference/models/litellm/#microsweagent.models.litellm_model.LitellmModel.cost","title":"cost  <code>instance-attribute</code>","text":"<pre><code>cost = 0.0\n</code></pre>"},{"location":"reference/models/litellm/#microsweagent.models.litellm_model.LitellmModel.n_calls","title":"n_calls  <code>instance-attribute</code>","text":"<pre><code>n_calls = 0\n</code></pre>"},{"location":"reference/models/litellm/#microsweagent.models.litellm_model.LitellmModel.query","title":"query","text":"<pre><code>query(messages: list[dict[str, str]], **kwargs) -&gt; str\n</code></pre> Source code in <code>src/microsweagent/models/litellm_model.py</code> <pre><code>def query(self, messages: list[dict[str, str]], **kwargs) -&gt; str:\n    response = self._query(messages, **kwargs)\n    cost = litellm.cost_calculator.completion_cost(response)\n    self.n_calls += 1\n    self.cost += cost\n    GLOBAL_MODEL_STATS.add(cost)\n    return response.choices[0].message.content  # type: ignore\n</code></pre>"},{"location":"reference/models/test_models/","title":"DeterministicModel","text":""},{"location":"reference/models/test_models/#microsweagent.models.test_models.DeterministicModelConfig","title":"microsweagent.models.test_models.DeterministicModelConfig  <code>dataclass</code>","text":"<pre><code>DeterministicModelConfig(\n    outputs: list[str],\n    model_name: str = \"deterministic\",\n    cost_per_call: float = 1.0,\n)\n</code></pre>"},{"location":"reference/models/test_models/#microsweagent.models.test_models.DeterministicModelConfig.outputs","title":"outputs  <code>instance-attribute</code>","text":"<pre><code>outputs: list[str]\n</code></pre>"},{"location":"reference/models/test_models/#microsweagent.models.test_models.DeterministicModelConfig.model_name","title":"model_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_name: str = 'deterministic'\n</code></pre>"},{"location":"reference/models/test_models/#microsweagent.models.test_models.DeterministicModelConfig.cost_per_call","title":"cost_per_call  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>cost_per_call: float = 1.0\n</code></pre>"},{"location":"reference/models/test_models/#microsweagent.models.test_models.DeterministicModel","title":"microsweagent.models.test_models.DeterministicModel","text":"<pre><code>DeterministicModel(**kwargs)\n</code></pre> <p>Initialize with a list of outputs to return in sequence.</p> Source code in <code>src/microsweagent/models/test_models.py</code> <pre><code>def __init__(self, **kwargs):\n    \"\"\"\n    Initialize with a list of outputs to return in sequence.\n    \"\"\"\n    self.config = DeterministicModelConfig(**kwargs)\n    self.current_index = -1\n    self.cost = 0.0\n    self.n_calls = 0\n</code></pre>"},{"location":"reference/models/test_models/#microsweagent.models.test_models.DeterministicModel.config","title":"config  <code>instance-attribute</code>","text":"<pre><code>config = DeterministicModelConfig(**kwargs)\n</code></pre>"},{"location":"reference/models/test_models/#microsweagent.models.test_models.DeterministicModel.current_index","title":"current_index  <code>instance-attribute</code>","text":"<pre><code>current_index = -1\n</code></pre>"},{"location":"reference/models/test_models/#microsweagent.models.test_models.DeterministicModel.cost","title":"cost  <code>instance-attribute</code>","text":"<pre><code>cost = 0.0\n</code></pre>"},{"location":"reference/models/test_models/#microsweagent.models.test_models.DeterministicModel.n_calls","title":"n_calls  <code>instance-attribute</code>","text":"<pre><code>n_calls = 0\n</code></pre>"},{"location":"reference/models/test_models/#microsweagent.models.test_models.DeterministicModel.query","title":"query","text":"<pre><code>query(messages: list[dict[str, str]], **kwargs) -&gt; str\n</code></pre> Source code in <code>src/microsweagent/models/test_models.py</code> <pre><code>def query(self, messages: list[dict[str, str]], **kwargs) -&gt; str:  # noqa: ARG002\n    self.current_index += 1\n    output = self.config.outputs[self.current_index]\n    if \"/sleep\" in output:\n        print(\"SLEEPING\")\n        time.sleep(float(output.split(\"/sleep\")[1]))\n        return self.query(messages, **kwargs)\n    if \"/warning\" in output:\n        logging.warning(output.split(\"/warning\")[1])\n        return self.query(messages, **kwargs)\n    self.n_calls += 1\n    self.cost += self.config.cost_per_call\n    GLOBAL_MODEL_STATS.add(self.config.cost_per_call)\n    return output\n</code></pre>"},{"location":"reference/models/utils/","title":"Model Utilities","text":"<p>Convenience functions for selecting and configuring models.</p>"},{"location":"reference/models/utils/#microsweagent.models.get_model","title":"microsweagent.models.get_model","text":"<pre><code>get_model(\n    input_model_name: str | None = None,\n    config: dict | None = None,\n) -&gt; Model\n</code></pre> <p>Get an initialized model object from any kind of user input or settings.</p> Source code in <code>src/microsweagent/models/__init__.py</code> <pre><code>def get_model(input_model_name: str | None = None, config: dict | None = None) -&gt; Model:\n    \"\"\"Get an initialized model object from any kind of user input or settings.\"\"\"\n    resolved_model_name = get_model_name(input_model_name, config)\n    if config is None:\n        config = {}\n    config = copy.deepcopy(config)\n    config[\"model_name\"] = resolved_model_name\n    if \"model_kwargs\" not in config:\n        config[\"model_kwargs\"] = {}\n    if not config.get(\"model_kwargs\", {}).get(\"api_key\"):\n        config[\"model_kwargs\"][\"api_key\"] = os.getenv(f\"API_KEY_{resolved_model_name.upper().replace('-', '_')}\") or \"\"\n    return get_model_class(resolved_model_name)(**config)\n</code></pre>"},{"location":"reference/models/utils/#microsweagent.models.get_model_name","title":"microsweagent.models.get_model_name","text":"<pre><code>get_model_name(\n    input_model_name: str | None = None,\n    config: dict | None = None,\n) -&gt; str\n</code></pre> <p>Get a model name from any kind of user input or settings.</p> Source code in <code>src/microsweagent/models/__init__.py</code> <pre><code>def get_model_name(input_model_name: str | None = None, config: dict | None = None) -&gt; str:\n    \"\"\"Get a model name from any kind of user input or settings.\"\"\"\n    if config is None:\n        config = {}\n    if input_model_name:\n        return input_model_name\n    if from_env := os.getenv(\"MSWEA_MODEL_NAME\"):\n        return from_env\n    if from_config := config.get(\"model\", {}).get(\"model_name\"):\n        return from_config\n    return prompt_for_model_name()\n</code></pre>"},{"location":"reference/models/utils/#microsweagent.models.get_model_class","title":"microsweagent.models.get_model_class","text":"<pre><code>get_model_class(model_name: str) -&gt; type\n</code></pre> <p>Select the best model class for a given model name.</p> Source code in <code>src/microsweagent/models/__init__.py</code> <pre><code>def get_model_class(model_name: str) -&gt; type:\n    \"\"\"Select the best model class for a given model name.\"\"\"\n    if any(s in model_name for s in [\"anthropic\", \"sonnet\", \"opus\"]):\n        from microsweagent.models.anthropic import AnthropicModel\n\n        return AnthropicModel\n    from microsweagent.models.litellm_model import LitellmModel\n\n    return LitellmModel\n</code></pre>"},{"location":"reference/models/utils/#microsweagent.models.prompt_for_model_name","title":"microsweagent.models.prompt_for_model_name","text":"<pre><code>prompt_for_model_name() -&gt; str\n</code></pre> <p>Prompt the user for a model name and store it in the global config file.</p> Source code in <code>src/microsweagent/models/__init__.py</code> <pre><code>def prompt_for_model_name() -&gt; str:\n    \"\"\"Prompt the user for a model name and store it in the global config file.\"\"\"\n    msg = (\n        \"[bold yellow]Choose your language model[/bold yellow]\\n\"\n        \"Popular models:\\n\"\n        \"[bold green]claude-3-5-sonnet-20241022[/bold green]\\n[bold green]gpt-4o[/bold green]\\n\"\n        \"[bold yellow]Your language model: [/bold yellow]\"\n    )\n    choice = console.input(msg)\n    set_key(global_config_file, \"MSWEA_MODEL_NAME\", choice)\n    if api_key := console.input(\n        f\"\\n[bold yellow]Set your language model API key[/bold yellow]\\n\"\n        f\"[dim]Ignore this, if you have already set the key as an environment variable.[/dim]\\n\"\n        f\"[dim]The key will be stored in [green]'{global_config_file}'[/green][/dim]\\n\"\n        f\"[bold yellow]Key (optional) &gt; [/bold yellow]\"\n    ):\n        set_key(global_config_file, f\"API_KEY_{choice.upper().replace('-', '_')}\", api_key)\n    return choice\n</code></pre>"},{"location":"reference/run/github_issue/","title":"GitHub Issue","text":""},{"location":"reference/run/github_issue/#microsweagent.run.github_issue","title":"microsweagent.run.github_issue","text":""},{"location":"reference/run/github_issue/#microsweagent.run.github_issue.DEFAULT_CONFIG","title":"DEFAULT_CONFIG  <code>module-attribute</code>","text":"<pre><code>DEFAULT_CONFIG = Path(\n    getenv(\n        \"MSWEA_GITHUB_CONFIG_PATH\",\n        package_dir / \"config\" / \"github_issue.yaml\",\n    )\n)\n</code></pre>"},{"location":"reference/run/github_issue/#microsweagent.run.github_issue.console","title":"console  <code>module-attribute</code>","text":"<pre><code>console = Console(highlight=False)\n</code></pre>"},{"location":"reference/run/github_issue/#microsweagent.run.github_issue.app","title":"app  <code>module-attribute</code>","text":"<pre><code>app = Typer()\n</code></pre>"},{"location":"reference/run/github_issue/#microsweagent.run.github_issue.fetch_github_issue","title":"fetch_github_issue","text":"<pre><code>fetch_github_issue(issue_url: str) -&gt; str\n</code></pre> <p>Fetch GitHub issue text from the URL.</p> Source code in <code>src/microsweagent/run/github_issue.py</code> <pre><code>def fetch_github_issue(issue_url: str) -&gt; str:\n    \"\"\"Fetch GitHub issue text from the URL.\"\"\"\n    # Convert GitHub issue URL to API URL\n    api_url = issue_url.replace(\"github.com\", \"api.github.com/repos\").replace(\"/issues/\", \"/issues/\")\n\n    headers = {}\n    if github_token := os.getenv(\"GITHUB_TOKEN\"):\n        headers[\"Authorization\"] = f\"token {github_token}\"\n\n    response = requests.get(api_url, headers=headers)\n    issue_data = response.json()\n\n    title = issue_data[\"title\"]\n    body = issue_data[\"body\"] or \"\"\n\n    return f\"GitHub Issue: {title}\\n\\n{body}\"\n</code></pre>"},{"location":"reference/run/github_issue/#microsweagent.run.github_issue.main","title":"main","text":"<pre><code>main(\n    issue_url: str = Option(\n        prompt=\"Enter GitHub issue URL\",\n        help=\"GitHub issue URL\",\n    ),\n    config: Path = Option(\n        DEFAULT_CONFIG,\n        \"-c\",\n        \"--config\",\n        help=\"Path to config file\",\n    ),\n    model: str | None = Option(\n        None, \"-m\", \"--model\", help=\"Model to use\"\n    ),\n    yolo: bool = Option(\n        False,\n        \"-y\",\n        \"--yolo\",\n        help=\"Run without confirmation\",\n    ),\n) -&gt; InteractiveAgent\n</code></pre> <p>Run micro-SWE-agent on a GitHub issue</p> Source code in <code>src/microsweagent/run/github_issue.py</code> <pre><code>@app.command()\ndef main(\n    issue_url: str = typer.Option(prompt=\"Enter GitHub issue URL\", help=\"GitHub issue URL\"),\n    config: Path = typer.Option(DEFAULT_CONFIG, \"-c\", \"--config\", help=\"Path to config file\"),\n    model: str | None = typer.Option(None, \"-m\", \"--model\", help=\"Model to use\"),\n    yolo: bool = typer.Option(False, \"-y\", \"--yolo\", help=\"Run without confirmation\"),\n) -&gt; InteractiveAgent:\n    \"\"\"Run micro-SWE-agent on a GitHub issue\"\"\"\n\n    _config = yaml.safe_load(Path(config).read_text())\n    _agent_config = _config.get(\"agent\", {})\n    if yolo:\n        _agent_config[\"confirm_actions\"] = False\n\n    task = fetch_github_issue(issue_url)\n\n    agent = InteractiveAgent(\n        get_model(model, _config.get(\"model\", {})),\n        DockerEnvironment(**_config.get(\"environment\", {})),\n        **_agent_config,\n    )\n\n    repo_url = issue_url.split(\"/issues/\")[0]\n    if github_token := os.getenv(\"GITHUB_TOKEN\"):\n        repo_url = repo_url.replace(\"https://github.com/\", f\"https://{github_token}@github.com/\") + \".git\"\n\n    agent.env.execute(f\"git clone {repo_url} /testbed\", cwd=\"/\")\n\n    exit_status, result = None, None\n    try:\n        exit_status, result = agent.run(task)\n    except KeyboardInterrupt:\n        console.print(\"\\n[bold red]KeyboardInterrupt -- goodbye[/bold red]\")\n    finally:\n        save_traj(agent, Path(\"traj.json\"), exit_status=exit_status, result=result)\n    return agent\n</code></pre>"},{"location":"reference/run/hello_world/","title":"Hello World","text":""},{"location":"reference/run/hello_world/#microsweagent.run.hello_world","title":"microsweagent.run.hello_world","text":""},{"location":"reference/run/hello_world/#microsweagent.run.hello_world.app","title":"app  <code>module-attribute</code>","text":"<pre><code>app = Typer()\n</code></pre>"},{"location":"reference/run/hello_world/#microsweagent.run.hello_world.main","title":"main","text":"<pre><code>main(\n    problem: str = Option(\n        ...,\n        \"-p\",\n        \"--problem\",\n        help=\"Problem statement\",\n        show_default=False,\n        prompt=True,\n    ),\n    model_name: str = Option(\n        getenv(\"MSWEA_MODEL_NAME\"),\n        \"-m\",\n        \"--model\",\n        help=\"Model name (defaults to MSWEA_MODEL_NAME env var)\",\n        prompt=\"What model do you want to use? (assuming that you've set the API key as the environment variable already)\",\n    ),\n) -&gt; DefaultAgent\n</code></pre> Source code in <code>src/microsweagent/run/hello_world.py</code> <pre><code>@app.command()\ndef main(\n    problem: str = typer.Option(..., \"-p\", \"--problem\", help=\"Problem statement\", show_default=False, prompt=True),\n    model_name: str = typer.Option(\n        os.getenv(\"MSWEA_MODEL_NAME\"),\n        \"-m\",\n        \"--model\",\n        help=\"Model name (defaults to MSWEA_MODEL_NAME env var)\",\n        prompt=\"What model do you want to use? (assuming that you've set the API key as the environment variable already)\",\n    ),\n) -&gt; DefaultAgent:\n    agent = DefaultAgent(\n        LitellmModel(model_name=model_name),\n        LocalEnvironment(),\n        **yaml.safe_load(Path(package_dir / \"config\" / \"default.yaml\").read_text())[\"agent\"],\n    )\n    agent.run(problem)\n    return agent\n</code></pre>"},{"location":"reference/run/local/","title":"Local","text":""},{"location":"reference/run/local/#microsweagent.run.local","title":"microsweagent.run.local","text":""},{"location":"reference/run/local/#microsweagent.run.local.DEFAULT_CONFIG","title":"DEFAULT_CONFIG  <code>module-attribute</code>","text":"<pre><code>DEFAULT_CONFIG = Path(\n    getenv(\n        \"MSWEA_LOCAL_CONFIG_PATH\",\n        package_dir / \"config\" / \"local.yaml\",\n    )\n)\n</code></pre>"},{"location":"reference/run/local/#microsweagent.run.local.console","title":"console  <code>module-attribute</code>","text":"<pre><code>console = Console(highlight=False)\n</code></pre>"},{"location":"reference/run/local/#microsweagent.run.local.app","title":"app  <code>module-attribute</code>","text":"<pre><code>app = Typer()\n</code></pre>"},{"location":"reference/run/local/#microsweagent.run.local.get_multiline_task","title":"get_multiline_task","text":"<pre><code>get_multiline_task() -&gt; str\n</code></pre> <p>Get a multiline problem statement from the user.</p> Source code in <code>src/microsweagent/run/local.py</code> <pre><code>def get_multiline_task() -&gt; str:\n    \"\"\"Get a multiline problem statement from the user.\"\"\"\n    console.print(\n        \"[bold yellow]What do you want to do?[/bold yellow] (press [bold red]Ctrl+D[/bold red] in a [red]new line[/red] to finish)\"\n    )\n    lines = []\n    while True:\n        try:\n            lines.append(console.input(\"[bold green]&gt;[/bold green] \"))\n        except EOFError:\n            break\n\n    print()\n    return \"\\n\".join(lines).strip()\n</code></pre>"},{"location":"reference/run/local/#microsweagent.run.local.main","title":"main","text":"<pre><code>main(\n    config: str = Option(\n        str(DEFAULT_CONFIG),\n        \"-c\",\n        \"--config\",\n        help=\"Path to config file\",\n    ),\n    model: str | None = Option(\n        None, \"-m\", \"--model\", help=\"Model to use\"\n    ),\n    problem: str | None = Option(\n        None,\n        \"-p\",\n        \"--problem\",\n        help=\"Problem statement\",\n        show_default=False,\n    ),\n    yolo: bool = Option(\n        False,\n        \"-y\",\n        \"--yolo\",\n        help=\"Run without confirmation\",\n    ),\n    output: Path | None = Option(\n        None, \"-o\", \"--output\", help=\"Output file\"\n    ),\n) -&gt; InteractiveAgent\n</code></pre> <p>Run micro-SWE-agent right here, right now.</p> Source code in <code>src/microsweagent/run/local.py</code> <pre><code>@app.command()\ndef main(\n    config: str = typer.Option(str(DEFAULT_CONFIG), \"-c\", \"--config\", help=\"Path to config file\"),\n    model: str | None = typer.Option(\n        None,\n        \"-m\",\n        \"--model\",\n        help=\"Model to use\",\n    ),\n    problem: str | None = typer.Option(None, \"-p\", \"--problem\", help=\"Problem statement\", show_default=False),\n    yolo: bool = typer.Option(False, \"-y\", \"--yolo\", help=\"Run without confirmation\"),\n    output: Path | None = typer.Option(None, \"-o\", \"--output\", help=\"Output file\"),\n) -&gt; InteractiveAgent:\n    \"\"\"Run micro-SWE-agent right here, right now.\"\"\"\n    _config = yaml.safe_load(Path(config).read_text())\n\n    if not problem:\n        problem = get_multiline_task()\n\n    # Use get_model to defer model imports (can take a while), but also to switch in\n    # some optimized models (especially for anthropic)\n    agent = InteractiveAgent(\n        get_model(model, _config.get(\"model\", {})),\n        LocalEnvironment(),\n        **(_config.get(\"agent\", {}) | {\"confirm_actions\": not yolo}),\n    )\n\n    exit_status, result = None, None\n    try:\n        exit_status, result = agent.run(problem)\n    except KeyboardInterrupt:\n        console.print(\"\\n[bold red]KeyboardInterrupt -- goodbye[/bold red]\")\n    finally:\n        if output:\n            save_traj(agent, output, exit_status=exit_status, result=result)\n    return agent\n</code></pre>"},{"location":"reference/run/local2/","title":"Local2 (Textual)","text":""},{"location":"reference/run/local2/#microsweagent.run.local2","title":"microsweagent.run.local2","text":""},{"location":"reference/run/local2/#microsweagent.run.local2.DEFAULT_CONFIG","title":"DEFAULT_CONFIG  <code>module-attribute</code>","text":"<pre><code>DEFAULT_CONFIG = Path(\n    getenv(\n        \"MSWEA_LOCAL2_CONFIG_PATH\",\n        package_dir / \"config\" / \"local.yaml\",\n    )\n)\n</code></pre>"},{"location":"reference/run/local2/#microsweagent.run.local2.app","title":"app  <code>module-attribute</code>","text":"<pre><code>app = Typer()\n</code></pre>"},{"location":"reference/run/local2/#microsweagent.run.local2.main","title":"main","text":"<pre><code>main(\n    config: str = Option(\n        str(DEFAULT_CONFIG),\n        \"-c\",\n        \"--config\",\n        help=\"Path to config file\",\n    ),\n    model: str | None = Option(\n        None, \"-m\", \"--model\", help=\"Model to use\"\n    ),\n    problem: str | None = Option(\n        None,\n        \"-p\",\n        \"--problem\",\n        help=\"Problem statement\",\n        show_default=False,\n    ),\n    yolo: bool = Option(\n        False,\n        \"-y\",\n        \"--yolo\",\n        help=\"Run without confirmation\",\n    ),\n) -&gt; None\n</code></pre> <p>Run micro-SWE-agent with textual interface.</p> Source code in <code>src/microsweagent/run/local2.py</code> <pre><code>@app.command()\ndef main(\n    config: str = typer.Option(str(DEFAULT_CONFIG), \"-c\", \"--config\", help=\"Path to config file\"),\n    model: str | None = typer.Option(\n        None,\n        \"-m\",\n        \"--model\",\n        help=\"Model to use\",\n    ),\n    problem: str | None = typer.Option(None, \"-p\", \"--problem\", help=\"Problem statement\", show_default=False),\n    yolo: bool = typer.Option(False, \"-y\", \"--yolo\", help=\"Run without confirmation\"),\n) -&gt; None:\n    \"\"\"Run micro-SWE-agent with textual interface.\"\"\"\n    _config = yaml.safe_load(Path(config).read_text())\n\n    if not problem:\n        problem = get_multiline_task()\n        if not problem:\n            typer.echo(\"No problem statement provided.\")\n            raise typer.Exit(1)\n\n    if yolo:\n        _config[\"agent\"][\"confirm_actions\"] = False\n\n    # Create and run the agent app\n    agent_app = AgentApp(\n        model=get_model(model, _config.get(\"model\", {})),\n        env=LocalEnvironment(),\n        task=problem,\n        **_config.get(\"agent\", {}),\n    )\n\n    try:\n        agent_app.run()\n    except KeyboardInterrupt:\n        typer.echo(\"\\nKeyboardInterrupt -- goodbye\")\n    finally:\n        save_traj(agent_app.agent, Path(\"traj.json\"), exit_status=agent_app.exit_status, result=agent_app.result)\n</code></pre>"},{"location":"reference/run/local2/#microsweagent.run.local2.cli","title":"cli","text":"<pre><code>cli() -&gt; None\n</code></pre> <p>CLI entry point for script execution.</p> Source code in <code>src/microsweagent/run/local2.py</code> <pre><code>def cli() -&gt; None:\n    \"\"\"CLI entry point for script execution.\"\"\"\n    app()\n</code></pre>"},{"location":"reference/run/swebench/","title":"SWE-bench","text":""},{"location":"reference/run/swebench/#microsweagent.run.extra.swebench","title":"microsweagent.run.extra.swebench","text":""},{"location":"reference/run/swebench/#microsweagent.run.extra.swebench.app","title":"app  <code>module-attribute</code>","text":"<pre><code>app = Typer()\n</code></pre>"},{"location":"reference/run/swebench/#microsweagent.run.extra.swebench.DATASET_MAPPING","title":"DATASET_MAPPING  <code>module-attribute</code>","text":"<pre><code>DATASET_MAPPING = {\n    \"full\": \"princeton-nlp/SWE-Bench\",\n    \"verified\": \"princeton-nlp/SWE-Bench_Verified\",\n    \"lite\": \"princeton-nlp/SWE-Bench_Lite\",\n    \"multimodal\": \"princeton-nlp/SWE-Bench_Multimodal\",\n    \"multilingual\": \"swe-bench/SWE-Bench_Multilingual\",\n    \"_test\": \"klieret/swe-bench-dummy-test-dataset\",\n}\n</code></pre>"},{"location":"reference/run/swebench/#microsweagent.run.extra.swebench.ProgressTrackingAgent","title":"ProgressTrackingAgent","text":"<pre><code>ProgressTrackingAgent(\n    *args,\n    progress_manager: RunBatchProgressManager | None = None,\n    instance_id: str = \"\",\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>DefaultAgent</code></p> <p>Simple wrapper around DefaultAgent that provides progress updates.</p> Source code in <code>src/microsweagent/run/extra/swebench.py</code> <pre><code>def __init__(self, *args, progress_manager: RunBatchProgressManager | None = None, instance_id: str = \"\", **kwargs):\n    super().__init__(*args, **kwargs)\n    self.progress_manager: RunBatchProgressManager | Mock = progress_manager or Mock()\n    self.instance_id = instance_id\n</code></pre>"},{"location":"reference/run/swebench/#microsweagent.run.extra.swebench.ProgressTrackingAgent.progress_manager","title":"progress_manager  <code>instance-attribute</code>","text":"<pre><code>progress_manager: RunBatchProgressManager | Mock = (\n    progress_manager or Mock()\n)\n</code></pre>"},{"location":"reference/run/swebench/#microsweagent.run.extra.swebench.ProgressTrackingAgent.instance_id","title":"instance_id  <code>instance-attribute</code>","text":"<pre><code>instance_id = instance_id\n</code></pre>"},{"location":"reference/run/swebench/#microsweagent.run.extra.swebench.ProgressTrackingAgent.run","title":"run","text":"<pre><code>run(task: str) -&gt; tuple[str, str]\n</code></pre> Source code in <code>src/microsweagent/run/extra/swebench.py</code> <pre><code>def run(self, task: str) -&gt; tuple[str, str]:\n    self.progress_manager.on_instance_start(self.instance_id)\n    try:\n        exit_status, result = super().run(task)\n    except Exception as e:\n        self.progress_manager.on_uncaught_exception(self.instance_id, e)\n        return type(e).__name__, str(e)\n    self.progress_manager.on_instance_end(self.instance_id, exit_status)\n    return exit_status, result\n</code></pre>"},{"location":"reference/run/swebench/#microsweagent.run.extra.swebench.ProgressTrackingAgent.step","title":"step","text":"<pre><code>step() -&gt; str\n</code></pre> <p>Override step to provide progress updates.</p> Source code in <code>src/microsweagent/run/extra/swebench.py</code> <pre><code>def step(self) -&gt; str:\n    \"\"\"Override step to provide progress updates.\"\"\"\n    self.progress_manager.update_instance_status(\n        self.instance_id, f\"Step {self.model.n_calls + 1} (${self.model.cost:.2f})\"\n    )\n    return super().step()\n</code></pre>"},{"location":"reference/run/swebench/#microsweagent.run.extra.swebench.get_swebench_docker_image_name","title":"get_swebench_docker_image_name","text":"<pre><code>get_swebench_docker_image_name(instance: dict) -&gt; str\n</code></pre> <p>Get the image name for a SWEBench instance.</p> Source code in <code>src/microsweagent/run/extra/swebench.py</code> <pre><code>def get_swebench_docker_image_name(instance: dict) -&gt; str:\n    \"\"\"Get the image name for a SWEBench instance.\"\"\"\n    image_name = instance.get(\"image_name\", None)\n    if image_name is None:\n        # Docker doesn't allow double underscore, so we replace them with a magic token\n        iid = instance[\"instance_id\"]\n        id_docker_compatible = iid.replace(\"__\", \"_1776_\")\n        image_name = f\"swebench/sweb.eval.x86_64.{id_docker_compatible}:latest\".lower()\n    return image_name\n</code></pre>"},{"location":"reference/run/swebench/#microsweagent.run.extra.swebench.update_preds_file","title":"update_preds_file","text":"<pre><code>update_preds_file(\n    output_path: Path,\n    instance_id: str,\n    model_name: str,\n    result: str,\n)\n</code></pre> <p>Update the output JSON file with results from a single instance.</p> Source code in <code>src/microsweagent/run/extra/swebench.py</code> <pre><code>def update_preds_file(output_path: Path, instance_id: str, model_name: str, result: str):\n    \"\"\"Update the output JSON file with results from a single instance.\"\"\"\n    with _OUTPUT_FILE_LOCK:\n        output_data = {}\n        if output_path.exists():\n            output_data = json.loads(output_path.read_text())\n        output_data[instance_id] = {\n            \"model_name_or_path\": model_name,\n            \"instance_id\": instance_id,\n            \"model_patch\": result,\n        }\n        output_path.write_text(json.dumps(output_data, indent=2))\n</code></pre>"},{"location":"reference/run/swebench/#microsweagent.run.extra.swebench.remove_from_preds_file","title":"remove_from_preds_file","text":"<pre><code>remove_from_preds_file(output_path: Path, instance_id: str)\n</code></pre> <p>Remove an instance from the predictions file.</p> Source code in <code>src/microsweagent/run/extra/swebench.py</code> <pre><code>def remove_from_preds_file(output_path: Path, instance_id: str):\n    \"\"\"Remove an instance from the predictions file.\"\"\"\n    if not output_path.exists():\n        return\n    with _OUTPUT_FILE_LOCK:\n        output_data = json.loads(output_path.read_text())\n        if instance_id in output_data:\n            del output_data[instance_id]\n            output_path.write_text(json.dumps(output_data, indent=2))\n</code></pre>"},{"location":"reference/run/swebench/#microsweagent.run.extra.swebench.process_instance","title":"process_instance","text":"<pre><code>process_instance(\n    instance: dict,\n    output_dir: Path,\n    model_name: str | None,\n    config_path: Path,\n    progress_manager=None,\n) -&gt; dict\n</code></pre> <p>Process a single SWEBench instance.</p> Source code in <code>src/microsweagent/run/extra/swebench.py</code> <pre><code>def process_instance(\n    instance: dict, output_dir: Path, model_name: str | None, config_path: Path, progress_manager=None\n) -&gt; dict:\n    \"\"\"Process a single SWEBench instance.\"\"\"\n    instance_id = instance[\"instance_id\"]\n    instance_dir = output_dir / instance_id\n    # avoid inconsistent state if something here fails and there's leftover previous files\n    remove_from_preds_file(output_dir / \"preds.json\", instance_id)\n    (instance_dir / f\"{instance_id}.traj.json\").unlink(missing_ok=True)\n    task = instance[\"problem_statement\"]\n\n    config = yaml.safe_load(config_path.read_text())\n    image_name = get_swebench_docker_image_name(instance)\n\n    model = get_model(model_name, config=config.get(\"model\", {}))\n    agent = ProgressTrackingAgent(\n        model,\n        DockerEnvironment(**(config.get(\"environment\", {}) | {\"image\": image_name})),\n        progress_manager=progress_manager,\n        instance_id=instance_id,\n        **config.get(\"agent\", {}),\n    )\n\n    try:\n        exit_status, result = agent.run(task)\n    except Exception as e:\n        exit_status, result = type(e).__name__, str(e)\n\n    data = {\n        \"instance_id\": instance_id,\n        \"info\": {\n            \"exit_status\": exit_status,\n            \"submission\": result,\n            \"model_stats\": {\n                \"instance_cost\": agent.model.cost,\n                \"api_calls\": agent.model.n_calls,\n            },\n        },\n        \"messages\": agent.messages,\n    }\n    instance_dir.mkdir(parents=True, exist_ok=True)\n    (instance_dir / f\"{instance_id}.traj.json\").write_text(json.dumps(data, indent=2))\n    update_preds_file(output_dir / \"preds.json\", instance_id, model.config.model_name, result)\n\n    return data\n</code></pre>"},{"location":"reference/run/swebench/#microsweagent.run.extra.swebench.process_instances_single_threaded","title":"process_instances_single_threaded","text":"<pre><code>process_instances_single_threaded(\n    instances: list[dict],\n    output_path: Path,\n    model: str | None,\n    config: Path,\n)\n</code></pre> <p>Process SWEBench instances sequentially.</p> Source code in <code>src/microsweagent/run/extra/swebench.py</code> <pre><code>def process_instances_single_threaded(instances: list[dict], output_path: Path, model: str | None, config: Path):\n    \"\"\"Process SWEBench instances sequentially.\"\"\"\n    for i, instance in enumerate(instances):\n        instance_id = instance[\"instance_id\"]\n\n        print(f\"Running instance {i + 1}/{len(instances)}: {instance_id}\")\n        process_instance(instance, output_path, model, config)\n        print(\n            f\"Instance {instance_id} completed - completed {i + 1}/{len(instances)}, ${microsweagent.models.GLOBAL_MODEL_STATS.cost:.4f}\"\n        )\n</code></pre>"},{"location":"reference/run/swebench/#microsweagent.run.extra.swebench.process_instances_multithreaded","title":"process_instances_multithreaded","text":"<pre><code>process_instances_multithreaded(\n    instances: list[dict],\n    output_path: Path,\n    n_workers: int,\n    model: str | None,\n    config: Path,\n)\n</code></pre> <p>Process SWEBench instances in parallel with progress tracking.</p> Source code in <code>src/microsweagent/run/extra/swebench.py</code> <pre><code>def process_instances_multithreaded(\n    instances: list[dict], output_path: Path, n_workers: int, model: str | None, config: Path\n):\n    \"\"\"Process SWEBench instances in parallel with progress tracking.\"\"\"\n\n    progress_manager = RunBatchProgressManager(len(instances), output_path / f\"exit_statuses_{time.time()}.yaml\")\n\n    print(f\"Starting parallel execution with {n_workers} workers...\")\n\n    with Live(progress_manager.render_group, refresh_per_second=4):\n        with concurrent.futures.ThreadPoolExecutor(max_workers=n_workers) as executor:\n            futures = [\n                executor.submit(process_instance, instance, output_path, model, config, progress_manager)\n                for instance in instances\n            ]\n            concurrent.futures.wait(futures)\n</code></pre>"},{"location":"reference/run/swebench/#microsweagent.run.extra.swebench.filter_instances","title":"filter_instances","text":"<pre><code>filter_instances(\n    instances: list[dict],\n    *,\n    filter_spec: str,\n    slice_spec: str = \"\",\n    shuffle: bool = False,\n) -&gt; list[dict]\n</code></pre> <p>Filter and slice a list of SWEBench instances.</p> Source code in <code>src/microsweagent/run/extra/swebench.py</code> <pre><code>def filter_instances(\n    instances: list[dict], *, filter_spec: str, slice_spec: str = \"\", shuffle: bool = False\n) -&gt; list[dict]:\n    \"\"\"Filter and slice a list of SWEBench instances.\"\"\"\n    if shuffle:\n        instances = sorted(instances.copy(), key=lambda x: x[\"instance_id\"])\n        random.seed(42)\n        random.shuffle(instances)\n    before_filter = len(instances)\n    instances = [instance for instance in instances if re.match(filter_spec, instance[\"instance_id\"])]\n    if (after_filter := len(instances)) != before_filter:\n        print(f\"Instance filter: {before_filter} -&gt; {after_filter} instances\")\n    if slice_spec:\n        values = [int(x) if x else None for x in slice_spec.split(\":\")]\n        instances = instances[slice(*values)]\n        if (after_slice := len(instances)) != before_filter:\n            print(f\"Instance slice: {before_filter} -&gt; {after_slice} instances\")\n    return instances\n</code></pre>"},{"location":"reference/run/swebench/#microsweagent.run.extra.swebench.main","title":"main","text":"<pre><code>main(\n    subset: str = Option(\n        \"lite\",\n        \"--subset\",\n        help=\"SWEBench subset to use or path to a dataset\",\n    ),\n    split: str = Option(\n        \"dev\", \"--split\", help=\"Dataset split\"\n    ),\n    slice_spec: str = Option(\n        \"\",\n        \"--slice\",\n        help=\"Slice specification (e.g., '0:5' for first 5 instances)\",\n    ),\n    filter_spec: str = Option(\n        \"\", \"--filter\", help=\"Filter instance IDs by regex\"\n    ),\n    shuffle: bool = Option(\n        False, \"--shuffle\", help=\"Shuffle instances\"\n    ),\n    output: str = Option(\n        \"\", \"-o\", \"--output\", help=\"Output directory\"\n    ),\n    workers: int = Option(\n        1,\n        \"-w\",\n        \"--workers\",\n        help=\"Number of worker threads for parallel processing\",\n    ),\n    model: str | None = Option(\n        None, \"-m\", \"--model\", help=\"Model to use\"\n    ),\n    redo_existing: bool = Option(\n        False,\n        \"--redo-existing\",\n        help=\"Redo existing instances\",\n    ),\n    config: Path = Option(\n        package_dir / \"config\" / \"extra\" / \"swebench.yaml\",\n        \"-c\",\n        \"--config\",\n        help=\"Path to a config file\",\n    ),\n) -&gt; None\n</code></pre> <p>Run micro-SWE-agent on SWEBench instances</p> Source code in <code>src/microsweagent/run/extra/swebench.py</code> <pre><code>@app.command()\ndef main(\n    subset: str = typer.Option(\"lite\", \"--subset\", help=\"SWEBench subset to use or path to a dataset\"),\n    split: str = typer.Option(\"dev\", \"--split\", help=\"Dataset split\"),\n    slice_spec: str = typer.Option(\"\", \"--slice\", help=\"Slice specification (e.g., '0:5' for first 5 instances)\"),\n    filter_spec: str = typer.Option(\"\", \"--filter\", help=\"Filter instance IDs by regex\"),\n    shuffle: bool = typer.Option(False, \"--shuffle\", help=\"Shuffle instances\"),\n    output: str = typer.Option(\"\", \"-o\", \"--output\", help=\"Output directory\"),\n    workers: int = typer.Option(1, \"-w\", \"--workers\", help=\"Number of worker threads for parallel processing\"),\n    model: str | None = typer.Option(None, \"-m\", \"--model\", help=\"Model to use\"),\n    redo_existing: bool = typer.Option(False, \"--redo-existing\", help=\"Redo existing instances\"),\n    config: Path = typer.Option(\n        package_dir / \"config\" / \"extra\" / \"swebench.yaml\", \"-c\", \"--config\", help=\"Path to a config file\"\n    ),\n) -&gt; None:\n    \"\"\"Run micro-SWE-agent on SWEBench instances\"\"\"\n    try:\n        dataset_path = DATASET_MAPPING[subset]\n    except KeyError:\n        dataset_path = subset\n    print(f\"Loading dataset {dataset_path}, split {split}...\")\n    instances = list(load_dataset(dataset_path, split=split))\n\n    instances = filter_instances(instances, filter_spec=filter_spec, slice_spec=slice_spec, shuffle=shuffle)\n    output_path = Path(output)\n    if not redo_existing and (output_path / \"preds.json\").exists():\n        existing_instances = list(json.loads((output_path / \"preds.json\").read_text()).keys())\n        print(f\"Skipping {len(existing_instances)} existing instances\")\n        instances = [instance for instance in instances if instance[\"instance_id\"] not in existing_instances]\n\n    output_path.mkdir(parents=True, exist_ok=True)\n    print(f\"Running on {len(instances)} instances...\")\n    print(f\"Results will be saved to {output_path}\")\n\n    if workers == 1:\n        process_instances_single_threaded(instances, output_path, model, config)\n    else:\n        process_instances_multithreaded(instances, output_path, workers, model, config)\n</code></pre>"}]}